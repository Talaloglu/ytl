import java.util.Properties
import java.io.FileInputStream

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.movieapp'
    compileSdk 34

    // Load secrets from local.properties (preferred) with env fallbacks
    def lp = new Properties()
    def lpFile = rootProject.file("local.properties")
    if (lpFile.exists()) {
        lp.load(new FileInputStream(lpFile))
    }
    def SUPABASE_URL_PROP = lp.getProperty('SUPABASE_URL', System.getenv('SB_URL') ?: System.getenv('SUPABASE_URL') ?: '')
    def SUPABASE_ANON_KEY_PROP = lp.getProperty('SUPABASE_ANON_KEY', System.getenv('SUPABASE_ANON_KEY') ?: '')

    defaultConfig {
        applicationId "com.movieapp"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // Expose as BuildConfig for use in Retrofit headers/baseUrl (do not commit actual values)
        buildConfigField 'String', 'SUPABASE_URL', '"' + SUPABASE_URL_PROP + '"'
        buildConfigField 'String', 'SUPABASE_ANON_KEY', '"' + SUPABASE_ANON_KEY_PROP + '"'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        compose true
        buildConfig true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

// Enable Room schema export to a local directory for migration tracking
kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas")
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Jetpack Compose
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material'
    // Pull-to-refresh APIs live under package `androidx.compose.material.pullrefresh`
    // and are included in the Material artifact above when using the Compose BOM.
    // No separate dependency is required.

    // ViewModel and LiveData/StateFlow
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.7.0'

    // Navigation Components
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    // Animated navigation for Compose (for smoother screen transitions)
    implementation 'com.google.accompanist:accompanist-navigation-animation:0.34.0'

    // Retrofit for network calls
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'

    // Gson for JSON parsing
    implementation 'com.google.code.gson:gson:2.10.1'

    // Coil for image loading
    implementation 'io.coil-kt:coil-compose:2.5.0'

    // ExoPlayer for video streaming
    implementation 'androidx.media3:media3-exoplayer:1.2.1'
    implementation 'androidx.media3:media3-ui:1.2.1'
    implementation 'androidx.media3:media3-common:1.2.1'
    implementation 'androidx.media3:media3-session:1.2.1'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    // Room (offline cache)
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'

    // DataStore for preferences
    implementation 'androidx.datastore:datastore-preferences:1.0.0'

    // Supabase for database integration
    implementation 'io.github.jan-tennert.supabase:postgrest-kt:2.0.4'
    implementation 'io.github.jan-tennert.supabase:realtime-kt:2.0.4'
    implementation 'io.ktor:ktor-client-android:2.3.5'
    implementation 'io.ktor:ktor-client-core:2.3.5'
    implementation 'io.ktor:ktor-utils:2.3.5'

    // LeakCanary for memory leak detection (Debug only)
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testImplementation 'app.cash.turbine:turbine:1.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}